# Default values for proxmox-exporter.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/starttoaster/proxmox-exporter
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

config:
  # Set to 'debug' for more logs
  log_level: 'info'

  # If you change this, change the service.port value too
  port: '8080'

  # Set to 'true' if the API server's TLS can not be verified
  api_insecure: 'false'

  # Set to your actual API server URL(s). Can be one, or multiple separated by commas
  # Ex: https://x:8006/,https://y:8006/,https://z:8006/
  endpoints: ''

  # A Proxmox API token and token-ID. Needs to have at least the PVEAuditor role
  token: ''
  tokenID: ''

serviceMonitor:
  enabled: false
  ## The label to use to retrieve the job name from.
  ## jobLabel: "app.kubernetes.io/name"
  additionalLabels: {}
  annotations: {}
  namespaceSelector: {}
  ## Default: scrape .Release.Namespace or namespaceOverride only
  ## To scrape all, use the following:
  ## namespaceSelector:
  ##   any: true
  targetLabels: []
  relabelings: []
  metricRelabelings: []

prometheusRule:
  enabled: false

  # Disable this to use your own rules provided in additionalRules
  enableBuiltinRules: true

  # A list of additional rules to provide to the PrometheusRule CR
  # additionalRules:
  #   - alert: ProxmoxRuleName
  #     annotations:
  #       summary: Proxmox node {{ printf "{{ $labels.node }}" }} is down
  #       description: Check the alerting Proxmox host
  #     expr: |
  #       proxmox_metric_name != 0
  #     for: 1m
  #     labels:
  #       severity: critical

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

networkPolicy:
  enabled: false
  policyTypes: []
  #    - Egress
  #    - Ingress
  egressRules: []
  #    - to:
  #        - namespaceSelector:
  #            matchLabels:
  #              name: chia-blockchain
  #      ports:
  #        - protocol: TCP
  #          port: 8555
  ingressRules: []
#    - from:
#        - namespaceSelector:
#            matchLabels:
#              name: chia-blockchain
#      ports:
#        - protocol: TCP
#          port: 8555

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
